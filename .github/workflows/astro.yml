name: Build Astro

on:
  push:
  workflow_dispatch:

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    container: floaterest/note:latest
    steps:
      - uses: actions/checkout@v2

      - uses: pnpm/action-setup@v2.2.4
        with: { version: latest }
      - uses: actions/setup-node@v3
        with: { node-version: latest, cache: pnpm }
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache graphics
        id: graphics
        uses: actions/cache@v3
        with:
          path: dist/**/*.svg
          key: Graphics-${{ hashFiles('dist/**/.tex') }}
          restore-keys: Graphics-

      - name: Cache Tectonic packages
        if: steps.graphics.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        id: tectonic
        with:
          path: ~/.cache/Tectonic
          key: Tectonic-${{ hashFiles('dist/**/.tex') }}
          restore-keys: Tectonic-

      - name: List cached files
        run: tree dist

      - name: Build
        run: pnpm run build

      - name: Remove PDF/SVG with no source files
        run: >
          comm -23 <(find dist -name  '*.pdf' | cut -d"." -f1 | sort)
          <(find dist -name  '*.tex' | cut -d"." -f1 | sort)
          | xargs -t -I{} rm -rf '{}.pdf' '{}.svg'

      - name: List dist
        run: tree dist
  #     - uses: actions/upload-pages-artifact@v1
  #       with: { name: github-pages, path: dist }

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   # Github Pages
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   steps:
  #     - id: deployment
  #       uses: actions/deploy-pages@v1

    # steps:
    #   - uses: actions/download-artifact@v3
    #     with: { name: github-pages }
    #   - run: tree -L 3
    #   - name: Upload to Deno Deploy
    #     uses: denoland/deployctl@v1
    #     with:
    #       project: '***'
    #       entrypoint: entry.ts
