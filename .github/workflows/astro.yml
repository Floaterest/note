name: Build

on:
  push:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

env:
  tectonic: ~/.cache/Tectonic
  install: curl --proto '=https' --tlsv1.2 -fsSL https://drop-sh.fullyjustified.net |sh

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: pnpm/action-setup@v2.2.4
        with: { version: latest }
      - uses: actions/setup-node@v3
        with: { node-version: latest, cache: pnpm }
      - name: Build
        run: pnpm install --frozen-lockfile && pnpm build

      - name: Cache SVG files
        id: svg
        uses: actions/cache@v3
        with:
          path: dist/*.svg
          key: SVG-${{ hashFiles('dist/*.tex') }}
          restore-keys: SVG

      - name: Install Tectonic
        run: ${{ env.install }}
        if: steps.svg.outputs.cache-hit != 'true'
        working-directory: /usr/local/bin

      - name: Cache Tectonic packages
        if: steps.svg.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        id: tectonic
        with:
          path: ~/.cache/Tectonic
          key: Tectonic-${{ hashFiles('dist/*.tex') }}
          restore-keys: Tectonic

      - name: Build missing SVGs and remove excessive SVGs
        if: steps.svg.outputs.cache-hit != 'true'
        run: python3 sync.py dist | xargs -r -L1 tectonic

      - name: Convert PDF to SVG
        if: steps.svg.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install pdf2svg
          ls *.tex | perl -pe 's/(.+)\.tex/$1.pdf $1.svg/' | xargs -L1 -P0 pdf2svg
        working-directory: dist

      - name: Put cached SVG count to summary
        run: echo "# Cached $(ls dist/*.svg | wc -l) SVG Files" >> $GITHUB_STEP_SUMMARY

      - name: List dist
        run: tree dist
      - uses: actions/upload-pages-artifact@v1
        with: { name: github-pages, path: dist }

  deploy:
    runs-on: ubuntu-latest
    needs: build

    # Github Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v1

    # steps:
    #   - uses: actions/download-artifact@v3
    #     with: { name: github-pages }
    #   - run: tree -L 3
    #   - name: Upload to Deno Deploy
    #     uses: denoland/deployctl@v1
    #     with:
    #       project: '***'
    #       entrypoint: entry.ts
